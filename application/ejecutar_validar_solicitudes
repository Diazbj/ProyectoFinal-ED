#!/bin/bash

# Configuración de timestamps y directorios
timestamp=$(date +"%Y%m%d_%H%M%S")
base_dir=$(pwd)
parent_dir=$(dirname "$base_dir")
log_dir="$base_dir/logs/validacion_documentos"
temp_dir="$log_dir/temp"
output_file="$log_dir/validacion_${timestamp}.log"
error_file="$log_dir/error_${timestamp}.log"
temp_output="$temp_dir/temp_output_${timestamp}.txt"
temp_error="$temp_dir/temp_error_${timestamp}.txt"

# Crear estructura de directorios
mkdir -p "$log_dir" "$temp_dir"

# Función de limpieza
cleanup() {
    if [ -f "$temp_output" ]; then rm "$temp_output"; fi
    if [ -f "$temp_error" ]; then rm "$temp_error"; fi
}

# Registrar inicio de ejecución
echo "=== Inicio de ejecución: $(date) ===" | tee -a "$output_file"

# Validar directorio padre
if [ ! -d "$parent_dir" ]; then
    echo "Error: El directorio padre del proyecto no existe" | tee -a "$error_file"
    exit 1
fi

# Cambiar al directorio del proyecto
cd "$parent_dir" || {
    echo "Error: No se pudo acceder al directorio del proyecto" | tee -a "$error_file"
    exit 1
}

# Compilar y empaquetar con Maven
echo "Compilando proyecto con Maven..." | tee -a "$output_file"
if ! mvn clean package -DskipTests > "$temp_output" 2> "$temp_error"; then
    echo "Error: Falló la compilación con Maven" | tee -a "$error_file"
    echo "Detalles del error:"
    cat "$temp_error" | tee -a "$error_file"
    cleanup
    read -p "Presiona Enter para continuar..."
    exit 1
fi

# Antes de ejecutar el jar
jar_path="$base_dir/bin/proyectofinaled-1.0-SNAPSHOT-jar-with-dependencies.jar"

# Ejecutar el validador de solicitudes usando el JAR generado
echo "Ejecutando validación de solicitudes..." | tee -a "$output_file"
if ! java -jar "$jar_path" validarSolicitudCotizante > "$temp_output" 2> "$temp_error"; then
    echo "Error: Falló la ejecución del programa" | tee -a "$error_file"
    echo "Detalles del error:"
    cat "$temp_error" | tee -a "$error_file"
    cleanup
    read -p "Presiona Enter para continuar..."
    exit 1
fi

# Procesar resultado y mover archivos
if [ -s "$temp_output" ]; then
    mv "$temp_output" "$log_dir/resultados/validacion_${timestamp}.log"
    echo "  - Resultados guardados en: logs/validaciones/resultados/validacion_${timestamp}.log"
fi

if [ -s "$temp_error" ]; then
    mv "$temp_error" "$log_dir/errores/validacion_${timestamp}.log"
    echo "  - Errores guardados en: logs/validaciones/errores/validacion_${timestamp}.log"
fi

# Registrar finalización
echo "=== Fin de ejecución: $(date) ===" | tee -a "$output_file"
echo "Proceso completado exitosamente." | tee -a "$output_file"
echo "Logs guardados en:"
echo "- Output: $output_file"
echo "- Errores: $error_file"

# Limpieza final
cleanup
# read -p "Presiona Enter para continuar..."
# Verificar y crear directorios necesarios
base_dir="${directorio.base}"
proceso_dir="${directorio.proceso}"
entrantes_dir="${directorio.entrantes}" 
procesadas_dir="${directorio.procesadas}"
caracterizaciones_dir="${directorio.caracterizaciones}"
utilitario_dir="${directorio.utilitario}"

for dir in "$base_dir" "$proceso_dir" "$entrantes_dir" "$procesadas_dir" "$caracterizaciones_dir" "$utilitario_dir"; do
    if [ ! -d "$dir" ]; then
        echo "Creando directorio: $dir"
        mkdir -p "$dir"
    fi
done

# Verificar archivos CSV necesarios
csv_files=(
    "${archivo.tipos.documento}"
    "${archivo.lista.cotizantes}"
    "${archivo.lista.inhabilitados}" 
    "${archivo.lista.aprobados}"
    "${archivo.lista.rechazados}"
)

for csv in "${csv_files[@]}"; do
    csv_path="$utilitario_dir/$csv"
    if [ ! -f "$csv_path" ]; then

